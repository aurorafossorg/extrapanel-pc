module main;

import std.string;
import std.path;
import std.stdio;

import gio.Resource;
import glib.GException;
import gtk.Main;

import app.app;
import util.config;
import util.logger;
import util.util;

string pkgdatadir = "@pkgdatadir@";
string builddatadir = "@builddatadir@";

/**
 *  main.d - Main entrypoint for the application
 */

static ExtraPanelGUI xPanelApp;

void main (string[] args)
{
    // Inits logger
    initLogger();

    logger.trace("Starting extrapanel...");

    // Remove app args from the array (GTK doesn't like custom args)
    string[] parsedArgs;
    foreach(arg; args) {
        if(arg == Args.RECONFIGURE) {

        } else {
            parsedArgs ~= arg;
        }
    }


    // Load the UI resources
    Resource resource;
    try {
        // Try to load from build path, if it exists
        resource = Resource.load(buildPath(builddatadir,
                                            "org.aurorafoss.extrapanel.gresource"));
        logger.info("Found gresource at path \"" ~ buildPath(builddatadir, "org.aurorafoss.extrapanel.gresource") ~ "\"");
    } catch(GException e) {
        // Try to load from install path
        logger.info("No local gresource file found, assuming it's installed...");
        try {
            resource = Resource.load(buildPath(pkgdatadir,
                                            "org.aurorafoss.extrapanel.gresource"));
            logger.info("Found gresource at path \"" ~ buildPath(pkgdatadir, "org.aurorafoss.extrapanel.gresource") ~ "\"");
        } catch(GException e) {
            logger.error("No gresource found! App was not installed correctly!");
            return;
        }
    } finally {
        Resource.register(resource);
    }

    // Save the args for global usage
    Configuration.appArgs ~= args;

    // Start UI
    Main.init(parsedArgs);
    xPanelApp = new ExtraPanelGUI();
    xPanelApp.run(parsedArgs);
}
