module extrapanel.manager.main;

// Extra Panel
import extrapanel.core.util.config;
import extrapanel.core.util.logger;

// GLib
import glib.GException;

// GIO
import gio.Resource;

// GTK
import gtk.Application;
import gtk.Main;

// STD
import std.path;
import std.stdio;

string pkgdatadir = "@pkgdatadir@";
string builddatadir = "@builddatadir@";

/**
 *  main.d - Main entrypoint for the manager
 */

static immutable enum Args : string {
	INSTALL = "-i",         // Install a plugin
	UNINSTALL = "-u"        // Uninstall a plugin
}

int main(string[] args) {
	for(int i = 1; i < args.length; i++) {
		// Prints help
		if(args[i] == "-h" || args[i] == "--help") {
			printHelp();
			return 0;

		// Install argument
		} else if(args[i] == "-i") {
			string inputPath = (i+1) < args.length ? args[i+1] : ".";
			return runInstallerUI(inputPath, args[i+2..$]);
		
		// Uninstall argument
		} else if(args[i] == "-u") {
			string inputPath = (i+1) < args.length ? args[i+1] : ".";
			return runUninstallerUI(inputPath, args[i+2..$]);

		// Unknown argument
		} else {
			writeln("Unknow argument: ", args[i]);
			writeln("Use -h or --help to get argument list");
			return -1;
		}
	}

	// No options present besides the own executable path
	writeln("No arguments were given.");
	writeln("Use -h or --help to get argument list");
	return -1;
}

void printHelp() {
	string text =  "Usage: extrapanel-manager [mode] [input]\n" ~
					"\n" ~
					"This is a tool for installing/uninstalling plugins. It's meant for internal usage, but can be used as is." ~
					" Available modes:\n" ~
					"  -i,		Installs a plugin from [input]\n" ~
					"  -u,		Uninstall a plugin with id [input]\n";

	writeln(text);
}

int runInstallerUI(string inputPath, string[] args) {
	Configuration.appArgs ~= args;
	setupLogLevel();

	trace("Starting extrapanel-manager...");

	// Load the UI resources
	Resource resource;
	try {
		// Try to load from build path, if it exists
		resource = Resource.load(buildPath(builddatadir,
											"org.aurorafoss.extrapanel.gresource"));
		info("Found gresource at path \"" ~ buildPath(builddatadir, "org.aurorafoss.extrapanel.gresource") ~ "\"");
	} catch(GException e) {
		// Try to load from install path
		info("No local gresource file found, assuming it's installed...");
		try {
			resource = Resource.load(buildPath(pkgdatadir,
											"org.aurorafoss.extrapanel.gresource"));
			info("Found gresource at path \"" ~ buildPath(pkgdatadir, "org.aurorafoss.extrapanel.gresource") ~ "\"");
		} catch(GException e) {
			error("No gresource found! App was not installed correctly!");
			return -1;
		}
	} finally {
		Resource.register(resource);
	}

	// Start UI
	import extrapanel.manager.ui.installer;
	string[] friendlyArgs = Configuration.getGTKFriendlyArgs();
	Main.init(friendlyArgs);
	app = new InstallerUI(inputPath);
	app.run(friendlyArgs);
	return app.returnState;
}

int runUninstallerUI(string inputPath, string[] args) {
	Configuration.appArgs ~= args;
	setupLogLevel();

	trace("Starting extrapanel-manager...");

	// Load the UI resources
	Resource resource;
	try {
		// Try to load from build path, if it exists
		resource = Resource.load(buildPath(builddatadir,
											"org.aurorafoss.extrapanel.gresource"));
		info("Found gresource at path \"" ~ buildPath(builddatadir, "org.aurorafoss.extrapanel.gresource") ~ "\"");
	} catch(GException e) {
		// Try to load from install path
		info("No local gresource file found, assuming it's installed...");
		try {
			resource = Resource.load(buildPath(pkgdatadir,
											"org.aurorafoss.extrapanel.gresource"));
			info("Found gresource at path \"" ~ buildPath(pkgdatadir, "org.aurorafoss.extrapanel.gresource") ~ "\"");
		} catch(GException e) {
			error("No gresource found! App was not installed correctly!");
			return -1;
		}
	} finally {
		Resource.register(resource);
	}

	// Start UI
	import extrapanel.manager.ui.uninstaller;
	string[] friendlyArgs = Configuration.getGTKFriendlyArgs();
	Main.init(friendlyArgs);
	app = new UninstallerUI(inputPath);
	app.run(friendlyArgs);
	return app.returnState;
}